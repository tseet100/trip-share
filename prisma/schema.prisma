// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
enum Role {
  USER
  ADMIN
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  name           String?
  image          String?
  hashedPassword String?
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  trips          Trip[]
  accounts       Account[]
  sessions       Session[]
}

model Trip {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // Core fields
  destination    String
  costCents      Int
  currency       String   @default("USD")
  bookingMethod  String   // e.g., "Airbnb", "Booking.com", "Direct", etc.
  startDate      DateTime?
  endDate        DateTime?
  details        String   // rich text/markdown allowed
  // Basic social fields for ownership & visibility (can be extended later)
  authorName     String?
  isPublic       Boolean  @default(true)
  // Relations
  author         User?    @relation(fields: [authorId], references: [id])
  authorId       String?
  points         TripPoint[]
  photos         TripPhoto[]
  places         TripPlace[]
}

// NextAuth adapter models (compatible with JWT sessions but required for adapters and linking accounts)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TripPoint {
  id       String  @id @default(cuid())
  trip     Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId   String
  lat      Float
  lng      Float
  position Int     @default(0) // order of points along the route
}

model TripPhoto {
  id       String  @id @default(cuid())
  trip     Trip    @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId   String
  url      String
  caption  String?
  createdAt DateTime @default(now())
}

enum PlaceType {
  RESTAURANT
  ATTRACTION
}

model TripPlace {
  id       String    @id @default(cuid())
  trip     Trip      @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId   String
  name     String
  type     PlaceType
  notes    String?
  address  String?
  url      String?
  position Int       @default(0)
}

// (User model defined above)